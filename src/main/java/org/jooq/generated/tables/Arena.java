/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ArenaRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Arena extends TableImpl<ArenaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ARENA</code>
     */
    public static final Arena ARENA = new Arena();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArenaRecord> getRecordType() {
        return ArenaRecord.class;
    }

    /**
     * The column <code>ARENA.ID</code>.
     */
    public final TableField<ArenaRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ARENA.NAME</code>.
     */
    public final TableField<ArenaRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>ARENA.ENABLE_RESTORER</code>.
     */
    public final TableField<ArenaRecord, Boolean> ENABLE_RESTORER = createField(DSL.name("ENABLE_RESTORER"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>ARENA.WORLD</code>.
     */
    public final TableField<ArenaRecord, String> WORLD = createField(DSL.name("WORLD"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ARENA.MIN_X</code>.
     */
    public final TableField<ArenaRecord, Integer> MIN_X = createField(DSL.name("MIN_X"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ARENA.MIN_Y</code>.
     */
    public final TableField<ArenaRecord, Integer> MIN_Y = createField(DSL.name("MIN_Y"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ARENA.MIN_Z</code>.
     */
    public final TableField<ArenaRecord, Integer> MIN_Z = createField(DSL.name("MIN_Z"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ARENA.MAX_X</code>.
     */
    public final TableField<ArenaRecord, Integer> MAX_X = createField(DSL.name("MAX_X"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ARENA.MAX_Y</code>.
     */
    public final TableField<ArenaRecord, Integer> MAX_Y = createField(DSL.name("MAX_Y"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ARENA.MAX_Z</code>.
     */
    public final TableField<ArenaRecord, Integer> MAX_Z = createField(DSL.name("MAX_Z"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ARENA.RESTORER_BLOCKS_PER_TICK</code>.
     */
    public final TableField<ArenaRecord, Integer> RESTORER_BLOCKS_PER_TICK = createField(DSL.name("RESTORER_BLOCKS_PER_TICK"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("250"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ARENA.DISPLAY_NAME</code>.
     */
    public final TableField<ArenaRecord, String> DISPLAY_NAME = createField(DSL.name("DISPLAY_NAME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ARENA.DESCRIPTION</code>.
     */
    public final TableField<ArenaRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ARENA.ITEM</code>.
     */
    public final TableField<ArenaRecord, String> ITEM = createField(DSL.name("ITEM"), SQLDataType.CLOB, this, "");

    private Arena(Name alias, Table<ArenaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Arena(Name alias, Table<ArenaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ARENA</code> table reference
     */
    public Arena(String alias) {
        this(DSL.name(alias), ARENA);
    }

    /**
     * Create an aliased <code>ARENA</code> table reference
     */
    public Arena(Name alias) {
        this(alias, ARENA);
    }

    /**
     * Create a <code>ARENA</code> table reference
     */
    public Arena() {
        this(DSL.name("ARENA"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ArenaRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3B;
    }

    @Override
    public List<UniqueKey<ArenaRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_3);
    }

    @Override
    public Arena as(String alias) {
        return new Arena(DSL.name(alias), this);
    }

    @Override
    public Arena as(Name alias) {
        return new Arena(alias, this);
    }

    @Override
    public Arena as(Table<?> alias) {
        return new Arena(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Arena rename(String name) {
        return new Arena(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Arena rename(Name name) {
        return new Arena(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Arena rename(Table<?> name) {
        return new Arena(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Arena where(Condition condition) {
        return new Arena(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Arena where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Arena where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Arena where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Arena where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Arena where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Arena where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Arena where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Arena whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Arena whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
